#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

source $BP_DIR/lib/helpers

________ "Load dependencies"
export_env_dir $ENV_DIR         # Get $PROJECT_DOTNET
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

PROJECT_VERSION=$(grep -oPm1 "(?<=<TargetFramework>)[^<]+" ${BUILD_DIR}/${PROJECT_DOTNET}/*.csproj)
NETCORE_VERSION=$([ $PROJECT_VERSION == "netcoreapp2.0" ] && echo "2.1.4" || echo "2.1.403")
cat << EOT
    STACK = ${STACK}
    PROJECT_VERSION = $PROJECT_VERSION
    NETCORE_VERSION = $NETCORE_VERSION
    PROJECT_DOTNET = $PROJECT_DOTNET
EOT

________ "Installing the dependencies"
if [ $STACK == "cedar-14" ] || [ $STACK == "heroku-14" ]; then
    if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
        apt_install libicu52
    else
        apt_install libunwind8 libicu52
    fi
    elif [ $STACK == "heroku-16" ]; then
    if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
        apt_install libicu55
    else
        apt_install libunwind8 libicu55
    fi
else
    if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
        apt_install libicu60 openssl1.0
    else
        apt_install libunwind8 libicu60 openssl1.0
    fi
fi | tab

________ "Installing dotnet"
install_dotnet $BUILD_DIR $CACHE_DIR $NETCORE_VERSION | tab
export_path $BUILD_DIR

export PATH="/app/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"

cd $BUILD_DIR
________ "dotnet --info"
dotnet --info | tab

if [ -z ${PROJECT_FILE:-} ]; then
    PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.csproj; x=`dirname "$x"`; done)
fi
if [ -z ${PROJECT_NAME:-} ]; then
    PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
fi
________ "publish ${PROJECT_FILE}"
dotnet publish $PROJECT_FILE --output ${BUILD_DIR}/heroku_output --configuration Release --runtime linux-x64 | tab

cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && ASPNETCORE_URLS='http://+:\$PORT' dotnet "./${PROJECT_NAME}.dll"
EOT
